/*******************************************************************************
 * Copyright (c) 2014 Gary F. Pollice
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Used in CS3733, Software Engineering at Worcester Polytechnic Institute
 *******************************************************************************/

package routes;

import java.util.ArrayList;

/**
 * This is the concrete implementation of the route network.
 * @version Nov 7, 2014
 */
public class RouteNetworkImpl implements RouteNetwork
{
	private ArrayList<Route> network;
	
	/**
	 * Default, and only constructor.
	 */
	public RouteNetworkImpl()
	{
		//initializeNetwork();
	}
	
	/**
	 * @see RouteNetwork.initializeNetwork()
	 */
	@Override
	public void initializeNetwork()
	{
		network = new ArrayList<Route>();
	}

	/**
	 * @see RouteNetwork.initializeNetwork(Route... routes)
	 */
	@Override
	public void initializeNetwork(Route... routes)
	{
		this.network = new ArrayList<Route>();
		for (Route r: routes) {
			network.add(r);
		}
	}

	/**
	 * @see RouteNetwork.addRoute(Route route)
	 */
	@Override
	public void addRoute(Route route) throws RouteException
	{
		if (network == null){
			throw new RouteException("Bro, what're you doing? Network hasn't been initiated.");
		}
		else {
			network.add(route);
		}
	}

	@Override
	public boolean isPathFrom(String source, String destination) throws RouteException
	{
		if (this.network == null)
			throw new RouteException("Can't check path if network hasn't been initiated, bro");
		else {
			for (Route r : network){
				if (r.getSource().equals(source)) {
					return recursivePathCheck(r,destination);
				}
			}
		}
		return false;
	}

	@Override
	public Route[] getShortestPath(String source, String destination)
			throws RouteException
	{
		ArrayList<Route> shortestPath = new ArrayList<Route>();
		ArrayList<Route> temp = new ArrayList<Route>();
		
		if(isPathFrom(source,destination)){
			for (Route r : network){
				if (r.getSource().equals(source)) {
					temp = recursiveShortPath(r,destination);
					if (shortestPath.isEmpty()){
						shortestPath = temp;
					}
					else{ 
						if (temp.size() < shortestPath.size()){
							shortestPath = temp;
						}
					}
				}
			}
			Route path[] = new Route[shortestPath.size()];
			System.out.println(shortestPath.size());

			for (int i = 0; i < temp.size(); i++){
				path[i] = temp.get(i);
			}
			return path;
		}
		else
			throw new RouteException("Bro, what're you doing? There isn't a path.");
	}
	
	public boolean recursivePathCheck(Route route, String destination){
		if (route.getDestination().equals(destination)){
			return true;
		}
		for (Route r : network){
			if (r.getSource().equals(route.getDestination())) {
				return recursivePathCheck(r,destination);
			}
		}
		return false;
	}

	public ArrayList<Route> recursiveShortPath(Route route, String destination){
		ArrayList<Route> shortestPath = new ArrayList<Route>();
		ArrayList<Route> currentPath = new ArrayList<Route>();
		
		if (route.getDestination().equals(destination)){
			shortestPath.add(route);
			return shortestPath;
		}
		
		for (Route r : network){
			if (r.getSource().equals(route.getDestination())) {
				currentPath = recursiveShortPath(r,destination);
				if (currentPath.size() < shortestPath.size()){
					shortestPath = currentPath;
				}
			}
		}
		return shortestPath;
	}
}


