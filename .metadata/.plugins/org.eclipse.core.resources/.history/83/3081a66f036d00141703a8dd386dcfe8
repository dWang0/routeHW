/*******************************************************************************
 * Copyright (c) 2014 Gary F. Pollice
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Used in CS3733, Software Engineering at Worcester Polytechnic Institute
 *******************************************************************************/

package routes;

import java.util.ArrayList;

/**
 * This is the concrete implementation of the route network.
 * @version Nov 7, 2014
 */
public class RouteNetworkImpl implements RouteNetwork
{
	private ArrayList<Route> network;
	
	/**
	 * Default, and only constructor.
	 */
	public RouteNetworkImpl()
	{
		//initializeNetwork();
	}
	
	/**
	 * @see RouteNetwork.initializeNetwork()
	 */
	@Override
	public void initializeNetwork()
	{
		network = new ArrayList<Route>();
	}

	/**
	 * @see RouteNetwork.initializeNetwork(Route... routes)
	 */
	@Override
	public void initializeNetwork(Route... routes)
	{
		this.network = new ArrayList<Route>();
		for (Route r: network) {
			network.add(r);
		}
	}

	/**
	 * @see RouteNetwork.addRoute(Route route)
	 */
	@Override
	public void addRoute(Route route) throws RouteException
	{
		if (network == null){
			throw new RouteException("Bro, what're you doing? Network hasn't been initiated.");
		}
		//else if (network.contains(route)) {
		//	throw new RouteException("Bro, what're you doing? This route is already in there!");
		//}
		else {
			network.add(route);
		}
	}

	@Override
	public boolean isPathFrom(String source, String destination) throws RouteException
	{
		if (this.network == null)
			throw new RouteException("Can't check path if network hasn't been initiated, bro");
		else {
			for (Route r : network){
				if (r.getSource().equals(source)) {
					recursivePathCheck(r,destination);
				}
			}
		}
		return false;
	}

	@Override
	public Route[] getShortestPath(String source, String destination)
			throws RouteException
	{
		// TODO Auto-generated method stub
		return null;
	}
	
	public boolean recursivePathCheck(Route route, String destination){
		for (Route r : network){
			if (r.getSource().equals(destination)){
				return true;
			}
			if (r.getSource().equals(route.getDestination())) {
				recursivePathCheck(r,destination);
			}
		}
		return false;
	}

}


